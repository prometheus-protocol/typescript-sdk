type UpdateResourceServerUrisArgs = 
 record {
   new_uris: vec text;
   resource_server_id: text;
 };
type Token = record {arbitrary_data: text;};
type StreamingStrategy = variant {Callback: CallbackStrategy;};
type StreamingCallbackHttpResponse = 
 record {
   body: blob;
   token: opt Token;
 };
type Result_1 = 
 variant {
   err: text;
   ok;
 };
type Result = 
 variant {
   err: text;
   ok: text;
 };
type ResourceServer = 
 record {
   name: text;
   owner: principal;
   payout_principal: principal;
   resource_server_id: text;
   service_principals: vec principal;
   status: variant {
             active;
             pending;
           };
   uris: vec text;
 };
type RegisterResourceServerArgs = 
 record {
   initial_service_principal: principal;
   name: text;
   payout_principal: principal;
   uris: vec text;
 };
type HttpResponse = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
   upgrade: opt bool;
 };
type HttpRequest = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type Client = 
 record {
   client_id: text;
   client_name: text;
   client_secret_hash: text;
   logo_uri: text;
   owner: principal;
   redirect_uris: vec text;
   status: variant {
             active;
             pending_activation;
           };
 };
type ChargeUserArgs = 
 record {
   amount: nat;
   icrc2_ledger_id: principal;
   user_to_charge: principal;
 };
type CallbackStrategy = 
 record {
   callback: func (Token) -> (StreamingCallbackHttpResponse) query;
   token: Token;
 };
type AuthCanister = 
 service {
   add_test_client: (client: Client) -> () oneway;
   charge_user: (args: ChargeUserArgs) -> (Result_1);
   complete_authorize: (session_id: text) -> (Result);
   http_request: (req: HttpRequest) -> (HttpResponse) query;
   http_request_update: (req: HttpRequest) -> (HttpResponse);
   register_resource_server: (args: RegisterResourceServerArgs) ->
    (ResourceServer);
   set_frontend_canister_id: (id: principal) -> () oneway;
   update_resource_server_uris: (args: UpdateResourceServerUrisArgs) ->
    (Result);
 };
service : () -> AuthCanister
